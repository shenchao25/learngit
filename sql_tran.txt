
演示如何在诸如Wise for Windows Installer之类的自定义环境中工作超出了本文的范围，但是我们来看看您需要做的基本修改，以支持数据库安装脚本并运行安装程序包。要支持脚本执行，您需要对默认安装进行的第一个更改是向安装程序数据库的属性表添加自定义属性。 .msi环境允许您通过分配适当的属性来定义全局变量。您可以在http://msdn.microsoft.com/library/en-us/msi/hh/msi/prop_0ylv.asp找到有用的属性描述。您选择的属性必须符合以下两个条件：您必须能够编辑我在文章中显示的自定义窗口中的属性，您必须能够在我提供的脚本中使用它们。由于上述限制，您必须将自定义属性定义分配给受限的公共属性状态，应用程序以大写字母（例如，MASTERDBMACHINE）指定。智能工具自动添加到“安全公用属性”列表中的INSTALLDIR属性将为新数据库和脚本文件保存所选的安装位置。
除了安装构建器自动生成的常见窗口之外，我还创建了两个自定义窗口。 （在安装过程中的这个阶段运行IKSample.msi是有用的，因为您可以查看在Windows和安装过程中显示的更改。）运行编译安装包会生成一个介绍窗口，然后是一个窗口，您可以选择数据库文件的目标目录。接下来，出现这两个自定义窗口中的第一个“连接到主数据库”窗口。图1显示了此窗口和登录数据库服务器所需的信息。此窗口上的字段分配给安装包中的属性。第一个字段是与MASTERDBMACHINE属性相关联的服务器名称。帐户信息与自定义属性MASTERDBPWD和MASTERDBUSER相关联。运行安装包时，您将提供具有管理员权限的数据库帐户来添加新的数据库。安装程序不存储此信息，但需要数据连接到SQL Server并执行用于创建和填充新数据库的命令。
第二个自定义输入窗口显示安装向导中的下一步。在图2所示的“新建数据库设置”窗口中，您可以为新数据库（例如，WHSDBNAME）提供自定义名称，并指定访问新数据库的用户帐户（例如，WHSDBUSER）和密码（例如WHSDBPWD）。如果您需要为数据库创建多个帐户，则可以调整此屏幕或添加允许您为安装指定其他用户帐户名称的屏幕。
完成数据输入到“新建数据库设置”窗口后，在下面的确认窗口中单击“下一步”。现在安装开始：Windows Installer将源目录的脚本文件复制到目标目录。复制文件后，安装程序包将运行三个自定义操作。您可以定义执行自定义脚本的自定义操作，方法与将安装程序数据库中的属性表添加到自定义属性相同。您可以在http://msdn.microsoft.com/library/en-us/msi/hh/msi/prop_0ylv.asp找到定义自定义操作的好参考。从Wise产品中，我添加了一个调用到安装脚本中包含的三个.vbs文件中的每一个。每个CreateDB，GrantPermission和RunScripts操作执行一个.vbs文件，正如我在后面的文章中所述，执行创建新数据库的步骤。
您创建的自定义安装目前为一个简单的数据库设置，但您可以自定义安装的脚本来创建自己的数据库。您的第一步??修改安装程序包中的.sql文件可以让您指定安装脚本构建的数据库结构。请注意，更改结构可能需要更改在安装期间动态运行的.vbs文件。您可以更改源目录IKSampleDBFiles中的所有文件的内容。我使用外部未压缩的源文件进行此安装，以便您可以根据需要替换.vbs和.sql脚本来构建自定义数据库。
创建数据库
数据库创建，安装的核心，是一系列的步骤，第一个是创建SQL脚本CreateWhsDB.sql。清单1显示了安装用于在当前服务器上创建数据库的示例脚本。当安装程序包执行附带的CreateWhsDB.vbs文件时，会产生此脚本。该安装指定了CREATE DATABASE命令的四个参数：第一个参数是新的数据库名称，第二个参数指定.mdf文件的位置。该脚本还可以指定日志文件的位置和名称;但是，当您未指定显式日志文件位置时，CREATE DATABASE命令会生成与数据库主数据文件相同的目录中的默认名称的文件。第三和第四个参数是数据库的初始数据库大小和文件增长设置。
脚本执行两个存储过程。第一个存储过程sp_addlogin为数据库服务器创建一个新的用户帐户，并为该帐户分配密码和默认数据库。 Sp_addlogin创建一个SQL Server帐户;要使脚本创建一个NT帐户或组，请将此存储过程调用替换为对sp_grantlogin的调用。 sp_addlogin和sp_grantlogin都可以使用sp_grantdbaccess存储过程。在脚本给用户访问SQL Server之后，sp_grantdbaccess存储过程将新帐户作为有效用户分配给服务器上的数据库。
清单1具有硬编码值，这就是为什么它只是一个示例。安装程序包启动CreateDB操作以运行清单2所示的CreateWhsDB.vbs脚本。清单2的代码使用一个文件系统对象来打开，然后替换清单1所包含的所有示例文本。清单2的脚本打开CreateWhsDB.sql文件后，脚本将使用安装程序定义的属性中的一系列会话值，以相同的格式写出相同的命令。第一个安装属性Session.Property（“INSTALLDIR”）使用您为数据库安装选择的脚本路径信息。此安装将脚本文件放在安装创建数据库文件的同一目录中。要更改脚本使用所选安装目录作为主数据库文件的目标的方式，您只需要修改命令。清单2中的代码将FILENAME值写入.sql脚本文件。
他的OpenTextFile命令让CreateWhsDB.vbs脚本打开CreateWhsDB.sql脚本文件。此命令有一些在脚本中不明显的参数。第一个参数设置路径和文件的名称。将信息从第一个参数附加到安装目录在运行时生成完整的路径。第二个参数显示文件是否应该打开用于阅读，写入或附加;值2表示写入。第三个参数值True表示该对象在文件不存在的情况下创建文件。最终的参数值-1表示文件的I / O部分使用Unicode字符。剩余的Session.Property值表示您添加到Installer程序包的自定义值。对于此脚本，值直接匹配图2所示的字段。值WHSDBNAME，WHSDBUSER和WHSDBPWD来自图2所示的数据库安装。
每个WriteLine命令都会在CreateWhsDB.sql脚本文件中放置一行，包括回车换行。 vbCrLf常量向CreateWhsDB.sql脚本添加一个额外的空行，以便可读性。该脚本通过关闭文件和文件系统对象来完成。虽然清单2中的代码提供了创建数据库和用户的方法，但它需要相当多的自定义脚本。如果每个安装需要这么多脚本，我在本文中提供的解决方案的有用性将是有限的。幸运的是，您可以生成数据库对象（例如，表，存储过程）和要导入到新数据库的静态数据。
生成SQL脚本
企业管理器提供了一个自动生成T-SQL脚本的界面，用于从数据库到表，用户定义的类型和其他数据库组件的所有内容。虽然本文动态定义了数据库，但您可以使用Enterprise Manager静态生成许多常见数据库元素（如表和存储过程）的T-SQL。因为这些常见的脚本在整体安装中起着重要的作用，所以我们简单的看一下生成这些脚本的一些不那么明显的方面。
设置帐户权限
就像为CREATE DATABASE命令创建脚本一样，您可以使用脚本来设置新的帐户权限。您需要最后运行此生成的脚本，因为在SQL Server可以授予权限之前，数据库，构成数据库的对象和用户帐户必须存在。清单3显示了GRANT命令允许访问存储过程和表的示例代码。 GRANT命令的基本参数根据对象的类型而有所不同。对于表或视图，您可以分配SELECT，UPDATE和DELETE权限的组合，而可以分配给存储过程的唯一权限为EXECUTE。 GRANT命令为用户（例如，NT或SQL Server），角色或组分配权限，并支持某些管理权限（如BACKUP DATABASE）的分配。但是，在数据库创建阶段更早地分配管理权限将更为合适。对于这个例子，我只关注为数据库对象分配权限。
关于GRANT命令的另一个注意事项是，为了简化脚本，该命令一次只为一个对象分配权限。因此，您要授予访问权限的每个表，视图或存储过程都必须有自己的命令。对于大型数据库，对于每个表，视图和存储过程都需要编写GRANT命令，这将很难完成。相反，清单4使用一组循环和一组对象名称来生成相应的T-SQL命令。
在清单4顶部附近，代码将变量设置为逗号分隔的表和存储过程名称列表。 VBScript代码不需要生成需要手动更新的静态列表，而是可以通过动态检查表和存储过程T-SQL文件在安装过程中生成对象名称。但是，当您需要为同一T-SQL文件中的元素分配多个权限级别时，以逗号分隔的名称列表也可以提供灵活性。
现在，我们来看看如何操作逗号分隔的名称列表。 VBScript Split（）命令是一种标准方法，可以使用分隔符并自动创建一个包含字符串中每个项目之一的数组。然后，VBScript代码使用生成的数组来创建分配用户权限的SQL脚本。如清单4所示，脚本分割了一个名称列表。然后在一个简单的For循环中，脚本将实现GRANT命令所需的行写入SQL脚本文件。该脚本处理一系列表中的每个字符串或存储过程名称。因为它知道每组对象的权限和类型，脚本可以为不同的表使用不同的设置。当清单4中的脚本已执行时，安装完成脚本语句以创建对象和权限。
运行脚本
安装向导生成动态T-SQL脚本CreateWhsDB.sql和GrantWhsDBPermissions.sql之后，安装程序将执行RunScripts，该脚本执行RunWhsScripts.vbs文件。 RunWhsScripts.vbs文件中的代码针对数据库执行每个T-SQL文件以创建数据库对象并分配权限。清单5的VBScript通过使用图1所包含的连接信息打开与数据库服务器的连接。 VBScript代码建立连接后，代码依次打开每个.sql脚本文件，并执行它们包含的命令。然后，代码打开数据文件，并将静态数据导入到新创建的数据库中。
要连接到数据库服务器，VBScript代码使用没有ADO数据源名称（DSN）的连接。您不需要DSN，因为清单5中的callout A中的代码使用ADODB连接，可以通过使用动态连接字符串连接到数据库。在标注A中，代码首先创建一个ADODB.Connection对象。该对象支持打开和保存数据库连接以及针对该数据库执行语句。 ADODB.Connection对象是VBScript代码用于创建和填充数据库的所有操作的唯一COM对象。
另外在清单5中的callout A中，代码将SQLOLEDB设置为连接的类型提供程序。连接字符串使用您在安装中定义的MASTERDBMACHINE，MASTERDBUSER和MASTERDBPWD属性，并在图1中进行了修改。当您使用SQLOLEDB提供程序时，连接字符串有四个部分。前三部分是帐号（User ID），密码（Password）和服务器名称（Data Source）。连接字符串中的第四部分设置为Master，告诉SQL Server服务器上要使用的数据库（在这个例子中，服务器是Initial Catalog）。您使用主数据库，因为它提供了用于创建新数据库的有效连接。因为安装需要连接到主数据库并创建新的数据库，所以MASTERDBUSER属性指定的帐户需要是一个帐户，例如系统管理员（sa）帐户，该帐户在数据库服务器上具有管理员权限。创建新数据库后，SQL USE命令允许执行在新创建的数据库的上下文中继续。
在清单5中的callout B中，VBScript代码执行SQL脚本。 VBScript代码首先打开.sql脚本文件进行阅读。请注意，OpenTextFile命令的第二个参数是1，这意味着它一次读取一行。如果一行不包含GO命令，则需要将该命令附加到字符串变量并读取下一行。循环继续将脚本文件中的行附加到变量strCommand，直到循环找到一个GO命令。然后，代码通过使用数据库连接来执行strCommand。执行后，代码将清除该变量并开始构建下一个命令。
在“生成SQL脚本”部分中，我提到可以动态构建表，视图和存储过程的列表。为此，您可以利用与执行SQL命令相同的概念。例如，每个表定义以字符串CREATE TABLE开始。由于callout B中的代码读取了WhsDBStructures.sql文件，它可以查找此字符串，然后从行中解析表的名称。解析名称可以替换在清单4开头的填充代码的手动维护的数据库对象名称列表。
清单5中的Callout C显示了VBScript代码的最后一节，将静态数据插入到数据库中。我有两个这个代码的注意事项。请注意，OpenTextFile命令的第四个参数具有潜在的缺陷：创建数据文件的DTS向导默认为ANSI文本而不是Unicode。要支持ASCII文件，您需要将此参数设置为默认值0.下面的标注C中的感兴趣的项目是SET IDENTITY_INSERT命令，它在脚本开始读取数据之前执行。该命令允许您将明确的值插入到表的IDENTITY列中。在静态数据插入期间关闭IDENTITY列可以让脚本复制导出的数据并维护相同的标识符。您可以在SQL Server联机丛书（BOL）中找到有关SET IDENTITY_INSERT命令的更多信息。
callout C中的代码使用与数据文件中每行相同的基本逻辑循环，除了每个数据行都包含INSERT语句可以使用的完整数据值集合。如前所述，您可以通过将静态文本包含在单引号中来准备数据，从而生成文件。为了使插入成功，所产生的行不需要操纵。您可以通过将列标题添加到导出的数据文件来修改脚本来增强这些文件


